#!/usr/bin/env ruby
require File.expand_path('../../support/step_manager', __FILE__)
require File.expand_path('../../support/paths_manager', __FILE__)

def announce(text)
  puts "\e[4;34m\n# #{text}\e[0m" # blue underline
end

case (option = ARGV.shift)
when '--selectors', '-s'
  search = ARGV.shift
  manager = PathsManager.new('features/support/selectors.rb')

  heading = 'All selectors from features/support/selectors.rb'
  heading << " containing '#{search}'" if search

  announce heading
  puts manager.paths(search)

when '--paths', '-p'
  search = ARGV.shift
  manager = PathsManager.new('features/support/paths.rb')

  heading = 'All paths from features/support/paths.rb'
  heading << " containing '#{search}'" if search

  announce heading
  puts manager.paths(search)

when '--help', '-h'

  puts <<-HELP
USAGE:
  spreewald [SEARCH]
    List all Spreewald steps + all steps from the current project (run from
    project root). Optionally filtered by SEARCH.

  spreewald --paths [SEARCH]
    List all paths from features/support/paths.rb, optionally filtered by SEARCH
    Alias -p

  spreewald --selectors [SEARCH]
    List all paths from features/support/paths.rb, optionally filtered by SEARCH
    Alias -s

  spreewald --version
    Print Spreewald's version and exit
    Alias -v

  spreewald --help
    Print this help and exit
    Alias -h

  HELP

when '--version', '-v'
  require File.expand_path('../../lib/spreewald_support/version', __FILE__)
  puts "Spreewald #{ Spreewald::VERSION }"

else
  spreewald_steps = File.expand_path('../../lib/spreewald', __FILE__)
  project_steps = 'features/step_definitions'
  manager = StepManager.new(spreewald_steps, project_steps)

  heading = 'All Spreewald steps'
  heading << " containing '#{option}'" if option

  announce heading
  puts manager.steps(option).map(&:to_s)
end

