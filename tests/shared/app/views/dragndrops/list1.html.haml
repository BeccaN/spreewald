%ul
  %li{:draggable => "true"} List Element 1
  %li{:draggable => "true"} List Element 2
  %li{:draggable => "true"} List Element 3
  %li{:draggable => "true"} List Element 4
  %li{:draggable => "true"} List Element 5

%style{ :type => 'text/css' }
  /
    :sass
      li
        cursor: move
        &.is_dragged
          border: 1px dashed #977900
        &.is_dragged_over
          background-color: red


:javascript

  var DragAndDrop = (function() {

    // http://www.html5rocks.com/en/tutorials/dnd/basics/

    var dragSource;

    function init() {
      var liElements = document.querySelectorAll("li");
      [].forEach.call(liElements, function(li) {
        li.addEventListener('dragstart', handleDragStart, false);
        li.addEventListener('dragend', handleDragEnd, false);
        li.addEventListener('dragenter', handleDragEnter, false);
        li.addEventListener('dragleave', handleDragLeave, false);
        li.addEventListener('dragover', handleDragOver, false);
        li.addEventListener('drop', handleDrop, false);
      });
    }

    function handleDragStart(event) {
      console.debug("dragstart");
      dragSource = this;
      event.dataTransfer.effectAllowed = 'move'; // necessary
      event.dataTransfer.setData('text/html', this.innerHTML);
      this.classList.add("is_dragged");
    }

    function handleDragEnd(event) {
      console.debug("dragend");
      this.classList.remove("is_dragged");
    }

    function handleDragEnter(event) {
      console.debug("dragenter");
      this.classList.add("is_dragged_over");
    }

    function handleDragLeave(event) {
      console.debug("dragleave");
      this.classList.remove("is_dragged_over");
    }

    function handleDragOver(event) {
      console.debug("dragover");
      if (event.preventDefault) {
        event.preventDefault(); // Necessary. Allows us to drop.
      }
      event.dataTransfer.dropEffect = 'move'; // Must have been allowed on 'dragstart'
      return false;
    }

    function handleDrop(event) {
      console.debug("drop");
      if (event.stopPropagation) {
        event.stopPropagation(); // Stops some browsers from redirecting.
      }
      this.classList.remove("is_dragged_over");
      if (dragSource != this) { // Don't do anything if dropping the same element we're dragging.
        dragSource.innerHTML = this.innerHTML; // swap html
        event.target.innerHTML = event.dataTransfer.getData('text/html');
      }
      return false;
    }

    return {
      init: init
    };

  })();

  DragAndDrop.init();
